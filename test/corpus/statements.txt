===============================================================================
Class declaration
===============================================================================

class MyClass extends ParentClass;

---

(program
  (class_declaration
    name: (identifier)
    (class_heritage
      parent: (identifier))))

===============================================================================
Class modifier declaration
===============================================================================

class ComplexClass extends Actor
	config(MyConfig),
	native,
	HideCategories(Display, Lighting);

---

(program
  (class_declaration
    name: (identifier)
    (class_heritage
      parent: (identifier))
    (class_modifier
      (identifier))
    (class_modifier)
    (class_modifier
      (identifier)
      (identifier))))

====
return
====

return 123;

---

(program
  (return_statement
    (number)))

===============================================================================
Function declaration
===============================================================================

function int DoSomething() {
	return 123;
}

---

(program
  (function_declaration
    return_type: (type
      (primitive_type))
    name: (identifier)
    parameters: (function_parameters)
    body: (block
      (return_statement
        (number)))))

===============================================================================
Function modifiers declaration
===============================================================================

private simulated function Tick(Float delta) {}

---

(program
  (function_declaration
    (function_modifier)
    (function_modifier)
    name: (identifier)
    parameters: (function_parameters
      type: (type
        (primitive_type))
      name: (identifier))
    body: (block)))

===============================================================================
Constant declaration
===============================================================================

const foo = "bar";
const RF_NotForEdit = 0x00400000;

---

(program
  (constant_declaration
    (assignment_expression
      left: (identifier)
      right: (string
        (string_fragment))))
  (constant_declaration
    (assignment_expression
      left: (identifier)
      right: (number))))

===============================================================================
Variable declaration
===============================================================================

var String MyVariable;

---

(program
  (variable_declaration
    type: (type
      (primitive_type))
    name: (identifier)))

===============================================================================
Array variable declaration
===============================================================================

var() String MyVariable[20];

---

(program
  (variable_declaration
    type: (type
      (primitive_type))
    name: (array_identifier
      (identifier)
      (array_dimensions
        size: (uint)))))

===============================================================================
Dynamic array variable declaration
===============================================================================

var Array<String> ResizeableBar;

---

(program
  (variable_declaration
    type: (type
      (dynamic_array
        (type
          (primitive_type))))
    name: (identifier)))

===============================================================================
Configurable variable declaration
===============================================================================

var(Advanced,Display) String EditMe;

---

(program
  (variable_declaration
    editgroups: (identifier)
    editgroups: (identifier)
    type: (type
      (primitive_type))
    name: (identifier)))

===============================================================================
Function declaration with body
===============================================================================

event Timer() {
	local SomeType MyThing;
	myThing = "LOL";

	myThing = 'NamedThing.What';

	// reassign some property value
	Super.MainThing.Again = myThing.TheThing;

	return;
}

---

(program
  (function_declaration
    name: (identifier)
    parameters: (function_parameters)
    body: (block
      (local_variable_declaration
        type: (type
          (identifier))
        name: (identifier))
      (expression_statement
        (assignment_expression
          left: (identifier)
          right: (string
            (string_fragment))))
      (expression_statement
        (assignment_expression
          left: (identifier)
          right: (name
            (nested_identifier
              object: (identifier)
              property: (property_identifier)))))
      (comment)
      (expression_statement
        (assignment_expression
          left: (nested_identifier
            object: (member_expression
              object: (identifier)
              property: (property_identifier))
            property: (property_identifier))
          right: (nested_identifier
            object: (identifier)
            property: (property_identifier))))
      (return_statement))))

===============================================================================
If statement
===============================================================================

if (NotThis || That) {
	return urMum;
} else if (!other) {
  return None;
}

---

(program
  (if_statement
    condition: (condition
      (binary_expression
        left: (identifier)
        right: (identifier)))
    consequence: (block
      (return_statement
        (identifier)))
    alternative: (if_statement
      condition: (condition
        (unary_expression
          operand: (identifier)))
      consequence: (block
        (return_statement
          (identifier))))))

===============================================================================
For statement
===============================================================================

for (I = 0; I < Total; I++) {
	continue;
}

---

(program
  (for_statement
    init: (assignment_expression
      left: (identifier)
      right: (number))
    condition: (binary_expression
      left: (identifier)
      right: (identifier))
    update: (update_expression
      argument: (identifier))
    body: (block
      (continue_statement))))

===============================================================================
While statement
===============================================================================

while (bTrue) {
	if (!bTrue) x++;
	else break;
}

---

(program
  (while_statement
    condition: (identifier)
    body: (block
      (if_statement
        condition: (condition
          (unary_expression
            operand: (identifier)))
        consequence: (expression_statement
          (update_expression
            argument: (identifier)))
        alternative: (break_statement)))))

===============================================================================
Do Until statement
===============================================================================

do i++;
until (i >= 10);

---

(program
  (do_until_statement
    body: (expression_statement
      (update_expression
        argument: (identifier)))
    condition: (binary_expression
      left: (identifier)
      right: (number))))

===============================================================================
Assert statement
===============================================================================

assert(shouldFail && "foo" != bar);

---

(program
  (assert_statement
    condition: (binary_expression
      left: (identifier)
      right: (binary_expression
        left: (string
          (string_fragment))
        right: (identifier)))))

===============================================================================
Enum declaration
===============================================================================

enum TheCoolEnum {
	COOL_Foo,
	COOL_Bar,
}

---

(program
  (enum_declaration
    name: (identifier)
    body: (enum_body
      (identifier)
      (identifier))))

===============================================================================
Variable enum declaration
===============================================================================

var private enum TheCoolEnum {
	COOL_Foo,
	COOL_Bar,
} cool1, cool2;

---

(program
  (variable_declaration
    (variable_modifier)
    (enum_declaration
      name: (identifier)
      body: (enum_body
        (identifier)
        (identifier)))
    name: (identifier)
    name: (identifier)))

===============================================================================
Struct declaration
===============================================================================

struct Color {
	var() config byte R, G, B, A;
};

---

(program
  (struct_declaration
    name: (identifier)
    body: (struct_body
      (variable_declaration
        (variable_modifier)
        type: (type
          (primitive_type))
        name: (identifier)
        name: (identifier)
        name: (identifier)
        name: (identifier)))))

===============================================================================
Complex struct declaration
===============================================================================

struct Scale
{
	var() config vector Scale;
	var() config float SheerRate;
	var() config enum ESheerAxis
	{
		SHEER_None,
		SHEER_XY,
		// etc
	} SheerAxis;
};

---

(program
  (struct_declaration
    name: (identifier)
    body: (struct_body
      (variable_declaration
        (variable_modifier)
        type: (type
          (native_type))
        name: (identifier))
      (variable_declaration
        (variable_modifier)
        type: (type
          (primitive_type))
        name: (identifier))
      (variable_declaration
        (variable_modifier)
        (enum_declaration
          name: (identifier)
          body: (enum_body
            (identifier)
            (identifier)
            (comment)))
        name: (identifier)))))

===============================================================================
Operator declaration
===============================================================================

native static final operator(24) bool something ( Object A, Object B );

private postoperator int ++- (out int A);

---

(program
  (operator_declaration
    (function_modifier)
    (function_modifier)
    (function_modifier)
    precedence: (uint)
    return_type: (type
      (primitive_type))
    operator: (operator_name
      (identifier))
    parameters: (function_parameters
      type: (type
        (identifier))
      name: (identifier)
      type: (type
        (identifier))
      name: (identifier)))
  (operator_declaration
    (function_modifier)
    return_type: (type
      (primitive_type))
    operator: (operator_name)
    parameters: (function_parameters
      (parameter_modifier)
      type: (type
        (primitive_type))
      name: (identifier))))

===============================================================================
Replication block
===============================================================================

replication {
	reliable if( Role==ROLE_Authority && bNetOwner )
		PlayerViewOffset, PlayerViewMesh, PlayerViewScale;
	unreliable if( Role==ROLE_Authority )
		ThirdPersonScale;
}

---

(program
  (replication_block
    condition: (condition
      (binary_expression
        left: (binary_expression
          left: (identifier)
          right: (identifier))
        right: (identifier)))
    consequence: (identifier)
    consequence: (identifier)
    consequence: (identifier)
    condition: (condition
      (binary_expression
        left: (identifier)
        right: (identifier)))
    consequence: (identifier)))

===============================================================================
Defaultproperties
===============================================================================

defaultproperties
{
     DrawType=DT_Mesh
     Texture=Texture'Engine.S_Inventory'
     AmbientGlow=255
     Skins[0]=Texture'Engine.Default'
     Skins[1]=None
}

---

(program
  (defaultproperties
    (default_property_assignment
      property: (identifier)
      value: (identifier))
    (default_property_assignment
      property: (identifier)
      value: (reference
        (identifier)
        (name
          (nested_identifier
            object: (identifier)
            property: (property_identifier)))))
    (default_property_assignment
      property: (identifier)
      value: (number))
    (default_property_assignment
      property: (identifier)
      index: (uint)
      value: (reference
        (identifier)
        (name
          (nested_identifier
            object: (identifier)
            property: (property_identifier)))))
    (default_property_assignment
      property: (identifier)
      index: (uint)
      value: (identifier))))

===============================================================================
Defaultproperties struct initialiser
===============================================================================

defaultproperties
{
     RotationRate=(Yaw=5000,Pitch=9000,Roll=0)
}

---

(program
  (defaultproperties
    (default_property_assignment
      property: (identifier)
      value: (struct_value
        left: (identifier)
        right: (number)
        left: (identifier)
        right: (number)
        left: (identifier)
        right: (number)))))
